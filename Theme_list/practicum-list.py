def createList(l, start, stop):
    from random import randint
    A = []
    for i in range(l):
        A.append(randint(start, stop))
    return A

'''
# -------------------------------------= 1. ЗАДАЧА «ЧЕТНЫЕ ИНДЕКСЫ» =---------------------------------------------------
# Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...).
# ----------------------------------------------------------------------------------------------------------------------
print('1. ЗАДАЧА «ЧЕТНЫЕ ИНДЕКСЫ»')
A = createList(10, 1, 101)
print(f'Сформированный  список: {A}')

R = []
for i in range(0, len(A), 2):
    R.append(A[i])
print(f'Элементы с четными индексами: {R}')
print()


# -------------------------------------= 2. ЗАДАЧА «ЧЕТНЫЕ ЭЛЕМЕНТЫ» =--------------------------------------------------
# Выведите все четные элементы списка. При этом используйте цикл for, перебирающий элементы списка, а не их индексы!
# ----------------------------------------------------------------------------------------------------------------------
print('2. ЗАДАЧА «ЧЕТНЫЕ ЭЛЕМЕНТЫ»')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')

R = []
for i in range(1, len(A), 2):
    R.append(A[i])
print(f'Четные элементы: {R}')
print()

# -------------------------------------= 3. ЗАДАЧА «БОЛЬШЕ ПРЕДЫДУЩЕГО» =-----------------------------------------------
# Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
# ----------------------------------------------------------------------------------------------------------------------
print('3. ЗАДАЧА «БОЛЬШЕ ПРЕДЫДУЩЕГО»')
A = createList(17, 1, 101)
print(f'Сформированный  список: {A}')
R = []
for i in range(len(A)):
    if A[i] > A[i-1]:
        R.append(A[i])
print(R)
print()

# -------------------------------------= 4. ЗАДАЧА «СОСЕДИ ОДНОГО ЗНАКА» =----------------------------------------------
# Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов
# одного знака нет — не выводите ничего. Если таких пар соседей несколько — выведите первую пару.
# ----------------------------------------------------------------------------------------------------------------------
print('4. ЗАДАЧА «СОСЕДИ ОДНОГО ЗНАКА»')
A = createList(15, -100, 100)
print(f'Сформированный  список: {A}')

for i in range(len(A)-1):
    if A[i] * A[i+1] > 0:
        print(A[i], A[i+1], end=' ')
        break
print()

# -------------------------------------= 5. ЗАДАЧА «БОЛЬШЕ СВОИХ СОСЕДЕЙ» =---------------------------------------------
# Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите
# количество таких элементов. Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.
# ----------------------------------------------------------------------------------------------------------------------
print('5. ЗАДАЧА «БОЛЬШЕ СВОИХ СОСЕДЕЙ»')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')

for i in range(1, len(A)-1):
    if A[i] > A[i-1] and A[i] > A[i+1]:
        print(A[i], end=' ')
print()

# -------------------------------------= 6. ЗАДАЧА «НАИБОЛЬШИЙ ЭЛЕМЕНТ» =-----------------------------------------------
# Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если
# наибольших элементов несколько, выведите индекс первого из них.
# ----------------------------------------------------------------------------------------------------------------------
print('6. ЗАДАЧА «НАИБОЛЬШИЙ ЭЛЕМЕНТ»')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')
print(f'Максимум: {max(A)}, индекс: {A.index(max(A))}')
print()

# -------------------------------------= 7. ЗАДАЧА «ШЕРЕНГА» =----------------------------------------------------------
# Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это
# сделать.
# Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост каждого человека в
# строю. После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.
# Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у
# Пети, то он должен встать после них.
# ----------------------------------------------------------------------------------------------------------------------
print('7. ЗАДАЧА «ШЕРЕНГА»')
pupils = createList(10, 150, 200)
pupils.sort(reverse=True)
Peter = int(input('Укажите рост Пети: '))
print(f'Рост учеников: {pupils}')

for i in range(len(pupils)-1):
    if pupils[i] >= Peter > pupils[i+1]:
        print(f'Петя должен встать под номером {i+2}')
        pupils.insert(i+1, Peter)
        break
print(pupils)
print()

# -------------------------------------= 8. ЗАДАЧА «КОЛИЧЕСТВО РАЗЛИЧНЫХ ЭЛЕМЕНТОВ» =-----------------------------------
# Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
# ----------------------------------------------------------------------------------------------------------------------
print('8. ЗАДАЧА «КОЛИЧЕСТВО РАЗЛИЧНЫХ ЭЛЕМЕНТОВ»')
A = createList(15, 1, 20)
A.sort()
print(f'Сформированный  список: {A}')
R = []
for i in range(len(A)):
    if A[i] not in R:
        R.append(A[i])
print(f'Количество различных элементов в списке: {len(R)}')
print()

# -------------------------------------= 9. ЗАДАЧА «ПЕРЕСТАВИТЬ СОСЕДНИЕ» =---------------------------------------------
# Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если элементов нечетное число, то последний
# элемент остается на своем месте.
# ----------------------------------------------------------------------------------------------------------------------
print('9. ЗАДАЧА «ПЕРЕСТАВИТЬ СОСЕДНИЕ»')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')
R = []
for i in range(0, len(A)-1, 2):
    R.append(A[i+1])
    R.append(A[i])
if len(A) % 2 != 0:
    R.append(A[len(A)-1])
print(R)
print()

# -------------------------------------= 10. ЗАДАЧА «ПЕРЕСТАВИТЬ MIN И MAX» =-------------------------------------------
# В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.
# ----------------------------------------------------------------------------------------------------------------------
print('10. ЗАДАЧА «ПЕРЕСТАВИТЬ MIN И MAX')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')
print(f'Максимум: {max(A)}')
print(f'Минимум: {min(A)}')
A[A.index(max(A))], A[A.index(min(A))] = min(A), max(A)
print(A)
print()

# -------------------------------------= 11. ЗАДАЧА «УДАЛИТЬ ЭЛЕМЕНТ» =-------------------------------------------------
# Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k, сдвинув влево все элементы,
# стоящие правее элемента с индексом k.
# Программа получает на вход список, затем число k. Программа сдвигает все элементы, а после этого удаляет последний
# элемент списка при помощи метода pop() без параметров.
# Программа должна осуществлять сдвиг непосредственно в списке, а не делать это при выводе элементов. Также нельзя
# использовать дополнительный список. Также не следует использовать метод pop(k) с параметром.
# ----------------------------------------------------------------------------------------------------------------------
print('11. ЗАДАЧА «УДАЛИТЬ ЭЛЕМЕНТ»')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')
k = int(input('Укажите индекс элемента: '))
A.remove(A[k])
print(A)
print()

# -------------------------------------= 12. ЗАДАЧА «ВСТАВИТЬ ЭЛЕМЕНТ» =------------------------------------------------
# Дан список целых чисел, число k и значение C. Необходимо вставить в список на позицию с индексом k элемент, равный C,
# сдвинув все элементы, имевшие индекс не менее k, вправо. Посколько при этом количество элементов в списке
# увеличивается, после считывания списка в его конец нужно будет добавить новый элемент, используя метод append.
# Вставку необходимо осуществлять уже в считанном списке, не делая этого при выводе и не создавая дополнительного списка.
# ----------------------------------------------------------------------------------------------------------------------
print('12. ЗАДАЧА «ВСТАВИТЬ ЭЛЕМЕНТ»')
A = createList(15, 1, 101)
print(f'Сформированный  список: {A}')
k = int(input('Укажите индекс элемента: '))
C = input('Укажите значение элемента: ')
A.insert(k, C)
print(A)
print()

# -------------------------------------= 13. ЗАДАЧА «КОЛИЧЕСТВО СОВПАДАЮЩИХ ПАР» =--------------------------------------
# Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента,
# равные друг другу образуют одну пару, которую необходимо посчитать
# ----------------------------------------------------------------------------------------------------------------------
print('13. ЗАДАЧА «КОЛИЧЕСТВО СОВПАДАЮЩИХ ПАР»')
A = createList(10, 1, 15)
print(f'Сформированный  список: {A}')
count = 0
for i in range(len(A)):
    for j in range(i+1, len(A)):
        if A[i] == A[j]:
            count += 1
print(f'Количество пар: {count}')
print()

# -------------------------------------= 14. ЗАДАЧА «УНИКАЛЬНЫЕ ЭЛЕМЕНТЫ» =---------------------------------------------
# Дан список. Выведите те его элементы, которые встречаются в списке только один раз. Элементы нужно выводить в том
# порядке, в котором они встречаются в списке.
# ----------------------------------------------------------------------------------------------------------------------
print('14. ЗАДАЧА «УНИКАЛЬНЫЕ ЭЛЕМЕНТЫ»')
A = createList(15, 1, 20)
print(f'Сформированный  список: {A}')
R = []
for i in range(len(A)):
    if A[i] not in R:
        R.append(A[i])
print('Уникальные элементы:', *R)
print()
'''
# -------------------------------------= 15. ЗАДАЧА «КЕГЕЛЬБАН» =-------------------------------------------------------
# N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N. Затем по этому ряду бросили K шаров,
# при этом i-й шар сбил все кегли с номерами от li до ri включительно. Определите, какие кегли остались стоять на месте.
# Программа получает на вход количество кеглей N и количество бросков K. Далее идет K пар чисел li, ri,
# при этом 1≤ li≤ ri≤ N.
# Программа должна вывести последовательность из N символов, где j-й символ есть “I”, если j-я кегля осталась стоять,
# или “.”, если j-я кегля была сбита.
# ----------------------------------------------------------------------------------------------------------------------
print('15. ЗАДАЧА «КЕГЕЛЬБАН»')
from random import randint
N = int(input('Укажите количество кеглей: '))
kegels = ["I" for i in range(N)]
print(*kegels)

K = int(input('Укажите количество бросков: '))

for i in range(K):
    ri = randint(1, N+1)
    li = randint(1, ri)
    print(f'Бросок номер {i+1}')
    print(f'Сбиты кегли с {li} по {ri}')
    for j in range(li-1, ri):
        kegels[j] = '.'
    print(*kegels)
print()

# -------------------------------------= 16. ЗАДАЧА «ФЕРЗИ» =-----------------------------------------------------------
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8 ферзей
# на доске, определите, есть ли среди них пара бьющих друг друга. Программа получает на вход восемь пар чисел, каждое
# число от 1 до 8 — координаты 8 ферзей. Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES
# ----------------------------------------------------------------------------------------------------------------------
print('16. ЗАДАЧА «ФЕРЗИ»')



print()